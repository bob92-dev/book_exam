package coreSystem;


import objects.Books;
import objects.Borrows;
import tools.*;
import objects.Users;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Order {

    /**
     * initialization of our programm. No return. Order the help function and create the database
     */
    public static void init() throws IOException {
        //give name at our databases. The file creater need it.
        String usersDatabase = "usersDatabase";
        String borrowersDatabase = "borrowersDatabase";
        String booksDatabase = "booksDatabase";

        System.out.println(
                        "                          |---------------------------------------|\n" +
                        "                          |  WELCOME  TO OUR LIBRARY APPLICATION  |\n" +
                        "                          |---------------------------------------|");

        //It shows the help menu so as to facilitate the run
        Order.help();

        // we create our databases
        FilesHandler file = new FilesHandler();
        file.createFile(usersDatabase);
        file.createFile(borrowersDatabase);
        file.createFile(booksDatabase);


        List<Users> usersList = new ArrayList<Users>();
        List<Books> booksList = new ArrayList<Books>();
        List <Borrows> borrowedList = new ArrayList<Borrows>();




    }

    /**
     * Classic help command that list all the commands. Return nothing.
     */
    public static void help() {
        System.out.println("MENU : ");
        System.out.println("Enter 1 to access help");
        System.out.println("Enter 2 to exit");
        System.out.println("Enter 3 to add a user");
        System.out.println("Enter 4 to edit a user");
        System.out.println("Enter 5 to remove a user");
        System.out.println("Enter 6 to list all the users");
        System.out.println("Enter 7 to add a book");
        System.out.println("Enter 8 to edit a book");
        System.out.println("Enter 9 to remove a book");
        System.out.println("Enter 10 to list all the books");
        System.out.println("Enter 11 to create a borrower");
        System.out.println("Enter 12 to finish a borrowing");
        System.out.println("Enter 13 to list all the books that are and were borrowed");
        System.out.println("Enter 14 to save");
        System.out.println("Enter 15 to restore");
    }

    /**
     * This function is used to run the core process.
     * It is called after the "init function" at the beginning of the process.
     * But, this function is also called at different times when an error occured.
     * @param cmdNum make the link between user choice entered by typing a number and the backend.
     * @param usersList list of all the users. This database is registered in a txt file.
     * @param booksList list of all the book that exist. This database is registered in a txt file.
     * @param borrowedList list of the borrowing, finished, or not. This database is registered in a txt file.
     */
    public static void runApp(int cmdNum, List<Users> usersList, List<Books> booksList, List<Borrows> borrowedList ){

        do {

            try {
                cmdNum = Tools.getChoice();
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                Order.processCmd(cmdNum, usersList, booksList,borrowedList);
            } catch (Exception message) {
                System.out.println(message);
            }
        }while (cmdNum!=2);
    }

    /**
     * It makes the link between the user choice and the backend of our app. It returns nothing.
     * @param cmdNumber is used to transform the user choice in a parameter.
     * @param usersList list of all the users. This database is registered in a txt file.
     * @param booksList list of all the book that exist. This database is registered in a txt file.
     * @param borrowedList list of the borrowing, finished, or not. This database is registered in a txt file
     * @throws IOException deals with problems that can be generated by files.
     */
    public static void processCmd(int cmdNumber, List <Users> usersList, List<Books> booksList, List<Borrows> borrowedList ) throws IOException {


        switch (cmdNumber) {
            case 1:
                System.out.println("help case");
                Order.help();
                break;

            case 2:
                System.out.println("You have asked to leave the application. Thanks you. We hope you've had fun.");
                Order.endApp(usersList, booksList, borrowedList);
                break;

            case 3:
                UsersTools.addUser(usersList, booksList, borrowedList);
                break;

            case 4:
                UsersTools.editUser(usersList, booksList, borrowedList);
                break;

            case 5:
                UsersTools.removeUser(usersList, booksList, borrowedList);
                break;

            case 6:
                Tools.showListElement((ArrayList) usersList);
                break;

            case 7:
                BooksTools.addBook(usersList,booksList,borrowedList);
                break;

            case 8:
                BooksTools.editBook(usersList,booksList,borrowedList);
                break;

            case 9:
                BooksTools.removeBook(usersList,booksList,borrowedList);
                break;

            case 10:
                Tools.showListElement((ArrayList) booksList);
                break;

            case 11:
                BorrowsTools.createBorrow(usersList,booksList,borrowedList);
                break;

            case 13:
                Tools.showListElement((ArrayList) borrowedList);

            //case 14
        }
    }

    /**
     * Close in a good way our app by making a final save of our databases.
     * @param usersList list of all the users. This database is registered in a txt file.
     * @param booksList list of all the book that exist. This database is registered in a txt file.
     * @param borrowedList list of the borrowing, finished, or not. This database is registered in a txt file.
     */
    public static void endApp (List <Users> usersList, List<Books> booksList, List<Borrows> borrowedList){
        //We tell the programm what is the name of our databases
        FilesHandler database = new FilesHandler();
        String usersDatabase = "usersDatabase";
        String borrowersDatabase= "borrowersDatabase";
        String booksDatabase ="booksDatabase";

        // then we write in files
        database.writeInFile(usersList,usersDatabase);
        //and show the ouput
        database.readFile(usersDatabase);

        database.writeInFile(booksList,booksDatabase);
        database.readFile(booksDatabase);

        database.writeInFile(borrowedList,borrowersDatabase);
        database.readFile(usersDatabase);
        System.out.println("BYE BYE. HAVE A GOOD DAY");
    }
}
//---------------------------------------- END OF CLASS --------------------------------------------------------------------------------//
